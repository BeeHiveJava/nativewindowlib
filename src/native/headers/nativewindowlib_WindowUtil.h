/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class nativewindowlib_WindowUtil */

#ifndef _Included_nativewindowlib_WindowUtil
#define _Included_nativewindowlib_WindowUtil
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     nativewindowlib_WindowUtil
 * Method:    FindWindowByTitle
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_nativewindowlib_WindowUtil_FindWindowByTitle
  (JNIEnv *, jclass, jstring);

/*
 * Class:     nativewindowlib_WindowUtil
 * Method:    FindAllWindows
 * Signature: (Ljava/util/List;)Ljava/util/List;
 */
JNIEXPORT jobject JNICALL Java_nativewindowlib_WindowUtil_FindAllWindows
  (JNIEnv *, jclass, jobject);

/*
 * Class:     nativewindowlib_WindowUtil
 * Method:    ShowWindow
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_nativewindowlib_WindowUtil_ShowWindow
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     nativewindowlib_WindowUtil
 * Method:    DestroyWindow
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_nativewindowlib_WindowUtil_DestroyWindow
  (JNIEnv *, jclass, jint);

/*
 * Class:     nativewindowlib_WindowUtil
 * Method:    CloseWindow
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_nativewindowlib_WindowUtil_CloseWindow
  (JNIEnv *, jclass, jint);

/*
 * Class:     nativewindowlib_WindowUtil
 * Method:    OpenIcon
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_nativewindowlib_WindowUtil_OpenIcon
  (JNIEnv *, jclass, jint);

/*
 * Class:     nativewindowlib_WindowUtil
 * Method:    EnableWindow
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_nativewindowlib_WindowUtil_EnableWindow
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     nativewindowlib_WindowUtil
 * Method:    IsWindowEnabled
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_nativewindowlib_WindowUtil_IsWindowEnabled
  (JNIEnv *, jclass, jint);

/*
 * Class:     nativewindowlib_WindowUtil
 * Method:    IsIconic
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_nativewindowlib_WindowUtil_IsIconic
  (JNIEnv *, jclass, jint);

/*
 * Class:     nativewindowlib_WindowUtil
 * Method:    IsZoomed
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_nativewindowlib_WindowUtil_IsZoomed
  (JNIEnv *, jclass, jint);

/*
 * Class:     nativewindowlib_WindowUtil
 * Method:    IsWindowVisible
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_nativewindowlib_WindowUtil_IsWindowVisible
  (JNIEnv *, jclass, jint);

/*
 * Class:     nativewindowlib_WindowUtil
 * Method:    IsHungAppWindow
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_nativewindowlib_WindowUtil_IsHungAppWindow
  (JNIEnv *, jclass, jint);

/*
 * Class:     nativewindowlib_WindowUtil
 * Method:    SetForegroundWindow
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_nativewindowlib_WindowUtil_SetForegroundWindow
  (JNIEnv *, jclass, jint);

/*
 * Class:     nativewindowlib_WindowUtil
 * Method:    GetForegroundWindow
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_nativewindowlib_WindowUtil_GetForegroundWindow
  (JNIEnv *, jclass);

/*
 * Class:     nativewindowlib_WindowUtil
 * Method:    MoveWindow
 * Signature: (IIIIIZ)V
 */
JNIEXPORT void JNICALL Java_nativewindowlib_WindowUtil_MoveWindow
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jboolean);

/*
 * Class:     nativewindowlib_WindowUtil
 * Method:    GetWindowRect
 * Signature: (I)Ljava/awt/Rectangle;
 */
JNIEXPORT jobject JNICALL Java_nativewindowlib_WindowUtil_GetWindowRect
  (JNIEnv *, jclass, jint);

/*
 * Class:     nativewindowlib_WindowUtil
 * Method:    SetWindowTextA
 * Signature: (ILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_nativewindowlib_WindowUtil_SetWindowTextA
  (JNIEnv *, jclass, jint, jstring);

/*
 * Class:     nativewindowlib_WindowUtil
 * Method:    GetWindowTextA
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_nativewindowlib_WindowUtil_GetWindowTextA
  (JNIEnv *, jclass, jint);

/*
 * Class:     nativewindowlib_WindowUtil
 * Method:    GetProcess
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_nativewindowlib_WindowUtil_GetProcess
  (JNIEnv *, jclass, jint);

#ifdef __cplusplus
}
#endif
#endif
